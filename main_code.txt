import cv2
import numpy as np
import mediapipe as mp
from playsound3 import playsound
import threading
import os

# Initialize Mediapipe pose detection
mp_pose = mp.solutions.pose
pose = mp_pose.Pose(static_image_mode=False, min_detection_confidence=0.5, min_tracking_confidence=0.5)

# Load YOLO
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
layer_names = net.getLayerNames()
output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]

# Load the COCO class labels
with open("coco.names", "r") as f:
    classes = [line.strip() for line in f.readlines()]

# Full path to the alarm sound file
alarm_sound_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'alarm.wav')

def play_alarm():
    playsound(alarm_sound_path)

def detect_fall(landmarks):
    left_shoulder = landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y
    right_shoulder = landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value].y
    left_hip = landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y
    right_hip = landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value].y
    left_knee = landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].y
    right_knee = landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value].y
    left_ankle = landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value].y
    right_ankle = landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value].y

    shoulder_height = (left_shoulder + right_shoulder) / 2
    hip_height = (left_hip + right_hip) / 2
    knee_height = (left_knee + right_knee) / 2
    ankle_height = (left_ankle + right_ankle) / 2

    # Adjust the threshold based on testing
    if shoulder_height < hip_height and hip_height < knee_height and knee_height < ankle_height:
        return True  # Falling
    return False  # Not falling

cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error opening webcam.")
    exit(1)

fall_detected_previous = False

while True:
    ret, frame = cap.read()
    if not ret:
        print("Failed to grab frame.")
        break

    # YOLO object detection
    height, width, _ = frame.shape
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    boxes = []
    confidences = []
    class_ids = []

    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and classes[class_id] == "person":
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    for i in indexes.flatten():
        x, y, w, h = boxes[i]
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)

    # Process frame for pose detection
    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = pose.process(frame_rgb)

    if results.pose_landmarks:
        mp.solutions.drawing_utils.draw_landmarks(frame, results.pose_landmarks, mp_pose.POSE_CONNECTIONS)
        fall_detected = detect_fall(results.pose_landmarks.landmark)

        if fall_detected and not fall_detected_previous:
            print("Fall detected! Executing emergency procedures.")
            threading.Thread(target=play_alarm).start()
            cv2.putText(frame, "FALL DETECTED!", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
            fall_detected_previous = True
        elif not fall_detected:
            fall_detected_previous = False
    else:
        cv2.putText(frame, "No landmarks detected.", (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

    cv2.imshow("Frame", frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

